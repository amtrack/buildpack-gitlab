#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
PROFILE_PATH="$BUILD_DIR/.profile.d/gitlab.sh"

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR ENV_DIR BIN_DIR PROFILE_PATH

# Syntax sugar.
source $BIN_DIR/utils

# exit if no build environment
[[ ! $REDIS_URL ]] && echo -e "\n**********\nNo supporting environment detected!\nPlease create supporting application services.\n**********\n" && exit 1

cd $BUILD_DIR

# 1. Packages / Dependencies
export DEBIAN_FRONTEND=noninteractive
status "Synchronizing package index"
sudo -E apt-get update -qq

status "Installing python-software-properties"
sudo -E apt-get install -qq -y python-software-properties software-properties-common > /dev/null
status "Adding apt repository ppa:git-core"
sudo FORCE_ADD_APT_REPOSITORY=yes add-apt-repository -y ppa:git-core/ppa > /dev/null
status "Synchronizing package index again"
sudo -E apt-get update -qq

status "Upgrading packages"
sudo -E apt-get upgrade -qq -y --force-yes -o Dpkg::Options::="--force-confold" > /dev/null

status "Installing required packages"
sudo -E apt-get install -qq -y unzip checkinstall libyaml-dev libgdbm-dev libreadline-dev libncurses5-dev libffi-dev libicu-dev redis-server python-docutils git > /dev/null
status "Cleaning up"
sudo -E apt-get clean -qq

# 2. Ruby
# via heroku-buildpack-ruby

# 3. System Users
status "Configuring git user"
sudo addgroup -q --gid 1002 git
sudo adduser -q --disabled-login --gecos 'GitLab' --home /home/git --uid 1002 --gid 1002 git
status "Configure git config user"
sudo -u git -H git config --global user.name GitLab
sudo -u git -H git config --global user.email "git@$(hostname -d)"
sudo -u git -H git config --global core.autocrlf input

# 4. GitLab shell
status "Installing gitlab-shell to /home/git"
sudo -u git -H mkdir -p /home/git/gitlab-shell
wget -qO- https://github.com/gitlabhq/gitlab-shell/archive/v1.8.0.tar.gz | sudo -u git -H tar xz --strip=1 -C /home/git/gitlab-shell/

(
	cd /home/git/gitlab-shell
	if sudo -u git -H git apply --check $ROOT_DIR/support/patches/gitlab-shell-config.rb.patch &> /dev/null; then
		status "Patching gitlab-shell/lib/gitlab_config.rb to allow using ERB in config.yml"
		sudo -u git -H git apply --ignore-space-change --ignore-whitespace $ROOT_DIR/support/patches/gitlab-shell-config.rb.patch
	fi
	status "Writing gitlab-shell/config.yml to read from REDIS_URL"
	sudo -u git -H cp $ROOT_DIR/support/templates/gitlab-shell-config.yml config.yml
	# dirty way to make sure the environment variables from gitlab will be available in gitlab-shell cli via ssh
	sudo cp $ROOT_DIR/support/templates/gitlab2gitlabshell-env.sh /usr/local/bin/gitlab2gitlabshell-env.sh
	status "Configure gitlab-shell ssh"
	sudo chmod +x /usr/local/bin/gitlab2gitlabshell-env.sh
	sudo grep -q "gitlab2gitlabshell" /etc/pam.d/sshd || echo "session    optional     pam_exec.so /usr/local/bin/gitlab2gitlabshell-env.sh" | sudo tee /etc/pam.d/sshd > /dev/null
	sudo grep -q "PermitUserEnvironment yes" /etc/ssh/sshd_config || echo "PermitUserEnvironment yes" | sudo tee /etc/ssh/sshd_config > /dev/null
	sudo -u git -H test -d /home/git/.profile.d || sudo -u git -H mkdir /home/git/.profile.d
	sudo -u git -H ln -s $BUILD_DIR/.profile.d/app-env.sh /home/git/.profile.d/app-env.sh
	status "Install gitlab-satellites"
	sudo -E -u git -H ./bin/install > /dev/null
	sudo -u git -H mkdir -p /home/git/gitlab-satellites
)

# 5. Database

# 6. GitLab

(

cd $BUILD_DIR # /app

# TODO: convert to patch
sed 's/web:.*/web: bundle exec unicorn_rails -p $PORT -E $RACK_ENV/' -i Procfile
grep -q "sshd" Procfile || echo "sshd: /usr/sbin/sshd -D" >> Procfile

if git apply --check $ROOT_DIR/support/patches/resque_url_4_sidekiq.rb.patch &> /dev/null; then
	status "Patching config/initializers/4_sidekiq.rb to read from REDIS_URL"
	git apply --ignore-space-change --ignore-whitespace $ROOT_DIR/support/patches/resque_url_4_sidekiq.rb.patch
fi
if git apply --check $ROOT_DIR/support/patches/resque_url_production.rb.patch &> /dev/null; then
	status "Patching config/environments/production.rb to read from REDIS_URL"
	git apply --ignore-space-change --ignore-whitespace $ROOT_DIR/support/patches/resque_url_production.rb.patch
fi

# copy default configurations
test -f config/gitlab.yml || cp config/gitlab.yml.example config/gitlab.yml
test -f config/resque.yml || cp config/resque.yml.example config/resque.yml

test -f config/unicorn.rb || cp config/unicorn.rb.example config/unicorn.rb
test -f config/initializers/rack_attack.rb || cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb

sudo -u git -H git config --global user.name "GitLab"
sudo -u git -H git config --global user.email "gitlab@localhost"
sudo -u git -H git config --global core.autocrlf input

# run processes as root
# status "Patching config/gitlab.yml to run processes as root"
# sed 's,# user: git,user: root,' -i config/gitlab.yml
# grep -q "ssh_user: git" config/gitlab.yml || sed '/ssh_port:/i\    ssh_user: git' -i config/gitlab.yml


# create required tmp and log directories
mkdir -p tmp/pids/ tmp/sockets/ public/uploads

# cat > config/sidekiq.yml <<EOF
# :concurrency: {{SIDEKIQ_CONCURRENCY}}
# EOF

status "Configure logrotate service" 
# install logrotate configuration
sudo cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab

# 7. Nginx
# not required

if [ ! -f config/initializers/smtp_settings.rb ]; then
	status "Writing config/initializers/smtp_settings.rb to read from SMTP_URL"
	cp $ROOT_DIR/support/templates/smtp_settings.rb config/initializers/smtp_settings.rb
fi

)

status "Install root ssh authorized key"
mkdir -p /root/.ssh
chmod 0700 /root/.ssh
cat > /root/.ssh/authorized_keys <<EOD
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKNgKAtxtK68TTSVjTRx4mF+uLbKkiNjRDBAhsRMXN7w25FoUFrmoPhwis7kyUjFtyxt7oWV+c0Qu+2MiRFaZl6Ai8VXjQU0MnaCbTPIEwq1fdz0iz4jimTauRl5LGSYz3qNNNI8+zLmyfIN5ebTmNLIifmr4zxkHix+lAEPTLDVThOOvfA2fYQU5+vZg6FEY29eGpuxxc9uMWeqVCQWN6QJEWHQg6BuO4QvPHZ4RxUjDlcla383pCc0NsTC0qS0d7n/4VbJ5OgrSlrNQkxYmcM++sa9qmqP3p8ERFsfslnGfAhl2AMx/NMiZK85iD2e0SzSFscJ/d9YcLHuMMp24j root@apollo.skylabmobile.com
EOD
chmod 0644 /root/.ssh/authorized_keys

status "Create sshd work folder"
# create the /var/run/sshd directory (required for sshd to start)
sudo mkdir -p /var/run/sshd

ls -la /home/git
status "Finished building GitLab"
